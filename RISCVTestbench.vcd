$version Generated by VerilatedVcd $end
$date Fri Dec  2 21:59:40 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 \ a0 [31:0] $end
  $var wire  1 Z clk $end
  $var wire  1 [ rst $end
  $scope module RISCV_top $end
   $var wire 32 b ADDRESS_WIDTH [31:0] $end
   $var wire  3 Q ALUCtrl [2:0] $end
   $var wire  1 E ALUSrc $end
   $var wire 32 b DATA_WIDTH [31:0] $end
   $var wire  1 N EQ $end
   $var wire 32 K ImmOp [31:0] $end
   $var wire  2 M ImmSrc [1:0] $end
   $var wire 32 ] PC [31:0] $end
   $var wire  1 F PCsrc $end
   $var wire  1 G RegWrite $end
   $var wire 32 \ a0 [31:0] $end
   $var wire 32 ] addr [31:0] $end
   $var wire  1 Z clk $end
   $var wire  3 P funct3 [2:0] $end
   $var wire  1 R funct7_5 $end
   $var wire 32 S instr [31:0] $end
   $var wire 25 L instr_imm [31:7] $end
   $var wire  7 O op [6:0] $end
   $var wire  5 J rd [4:0] $end
   $var wire  5 H rs1 [4:0] $end
   $var wire  5 I rs2 [4:0] $end
   $var wire  1 [ rst $end
   $var wire  1 N zero $end
   $scope module CU $end
    $var wire  3 Q ALUControl [2:0] $end
    $var wire  2 U ALUOp [1:0] $end
    $var wire  1 E ALUSrc $end
    $var wire  1 T Branch $end
    $var wire  2 M ImmSrc [1:0] $end
    $var wire  1 F PCSrc $end
    $var wire  1 G RegWrite $end
    $var wire  3 P funct3 [2:0] $end
    $var wire  1 R funct7_5 $end
    $var wire  7 O op [6:0] $end
    $var wire  1 V op5 $end
    $var wire  1 N zero $end
    $scope module ALU_Deco $end
     $var wire  3 Q ALUControl [2:0] $end
     $var wire  2 U ALUOp [1:0] $end
     $var wire  3 P funct3 [2:0] $end
     $var wire  1 R funct7_5 $end
     $var wire  1 V op5 $end
    $upscope $end
    $scope module Main_Deco $end
     $var wire  2 U ALUOp [1:0] $end
     $var wire  1 E ALUSrc $end
     $var wire  1 T Branch $end
     $var wire  2 M ImmSrc [1:0] $end
     $var wire  1 G RegWrite $end
     $var wire  7 O op [6:0] $end
    $upscope $end
   $upscope $end
   $scope module InstrROM $end
    $var wire 32 b ADDRESS_WIDTH [31:0] $end
    $var wire 32 b DATA_WIDTH [31:0] $end
    $var wire 32 ] addr [31:0] $end
    $var wire 32 S instr [31:0] $end
    $var wire  8 # rom_array[-1] [7:0] $end
    $var wire  8 $ rom_array[0] [7:0] $end
   $upscope $end
   $scope module PC_top $end
    $var wire 32 K ImmOp [31:0] $end
    $var wire 32 ] PC [31:0] $end
    $var wire  1 F PCsrc $end
    $var wire 32 b WIDTH [31:0] $end
    $var wire 32 ^ branchPC [31:0] $end
    $var wire  1 Z clk $end
    $var wire 32 _ nextPC [31:0] $end
    $var wire  1 [ rst $end
    $scope module PC_adder $end
     $var wire 32 b INPUT_WIDTH [31:0] $end
     $var wire 32 ] a [31:0] $end
     $var wire 32 K b [31:0] $end
     $var wire 32 ^ sum [31:0] $end
     $var wire 32 ^ sum_internal [31:0] $end
    $upscope $end
    $scope module PC_mux $end
     $var wire 32 b WIDTH [31:0] $end
     $var wire 32 _ data_out [31:0] $end
     $var wire 32 ^ inputA [31:0] $end
     $var wire 32 ` inputB [31:0] $end
     $var wire  1 F sel $end
    $upscope $end
    $scope module PC_reg $end
     $var wire 32 b WIDTH_IN [31:0] $end
     $var wire 32 b WIDTH_OUT [31:0] $end
     $var wire  1 Z clk $end
     $var wire 32 _ data_in [31:0] $end
     $var wire 32 ] data_out [31:0] $end
     $var wire  1 [ rst $end
    $upscope $end
   $upscope $end
   $scope module SignEX $end
    $var wire 32 K ImmOp [31:0] $end
    $var wire  2 M ImmSrc [1:0] $end
    $var wire 25 L instr_imm [31:7] $end
   $upscope $end
   $scope module reg_alu_top $end
    $var wire 32 c ADDRESS [31:0] $end
    $var wire  3 Q ALUctrl [2:0] $end
    $var wire 32 W ALUop1 [31:0] $end
    $var wire 32 X ALUop2 [31:0] $end
    $var wire 32 Y ALUout [31:0] $end
    $var wire  1 E ALUsrc $end
    $var wire  1 N EQ $end
    $var wire 32 K ImmOp [31:0] $end
    $var wire  1 G RegWrite $end
    $var wire 32 b WIDTH [31:0] $end
    $var wire 32 \ a0 [31:0] $end
    $var wire  1 Z clk $end
    $var wire  5 J rd [4:0] $end
    $var wire 32 a regOp2 [31:0] $end
    $var wire  5 H rs1 [4:0] $end
    $var wire  5 I rs2 [4:0] $end
    $scope module alu1 $end
     $var wire  3 Q ALUctrl [2:0] $end
     $var wire 32 W ALUop1 [31:0] $end
     $var wire 32 X ALUop2 [31:0] $end
     $var wire 32 Y ALUout [31:0] $end
     $var wire  1 N EQ $end
     $var wire 32 b WIDTH [31:0] $end
    $upscope $end
    $scope module reg1 $end
     $var wire  5 H AD1 [4:0] $end
     $var wire  5 I AD2 [4:0] $end
     $var wire  5 J AD3 [4:0] $end
     $var wire 32 c ADDRESS_WIDTH [31:0] $end
     $var wire 32 b DATA_WIDTH [31:0] $end
     $var wire 32 W RD1 [31:0] $end
     $var wire 32 a RD2 [31:0] $end
     $var wire 32 Y WD3 [31:0] $end
     $var wire  1 G WE3 $end
     $var wire 32 \ a0 [31:0] $end
     $var wire  1 Z clk $end
     $var wire 32 % registers[0] [31:0] $end
     $var wire 32 / registers[10] [31:0] $end
     $var wire 32 0 registers[11] [31:0] $end
     $var wire 32 1 registers[12] [31:0] $end
     $var wire 32 2 registers[13] [31:0] $end
     $var wire 32 3 registers[14] [31:0] $end
     $var wire 32 4 registers[15] [31:0] $end
     $var wire 32 5 registers[16] [31:0] $end
     $var wire 32 6 registers[17] [31:0] $end
     $var wire 32 7 registers[18] [31:0] $end
     $var wire 32 8 registers[19] [31:0] $end
     $var wire 32 & registers[1] [31:0] $end
     $var wire 32 9 registers[20] [31:0] $end
     $var wire 32 : registers[21] [31:0] $end
     $var wire 32 ; registers[22] [31:0] $end
     $var wire 32 < registers[23] [31:0] $end
     $var wire 32 = registers[24] [31:0] $end
     $var wire 32 > registers[25] [31:0] $end
     $var wire 32 ? registers[26] [31:0] $end
     $var wire 32 @ registers[27] [31:0] $end
     $var wire 32 A registers[28] [31:0] $end
     $var wire 32 B registers[29] [31:0] $end
     $var wire 32 ' registers[2] [31:0] $end
     $var wire 32 C registers[30] [31:0] $end
     $var wire 32 D registers[31] [31:0] $end
     $var wire 32 ( registers[3] [31:0] $end
     $var wire 32 ) registers[4] [31:0] $end
     $var wire 32 * registers[5] [31:0] $end
     $var wire 32 + registers[6] [31:0] $end
     $var wire 32 , registers[7] [31:0] $end
     $var wire 32 - registers[8] [31:0] $end
     $var wire 32 . registers[9] [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
0E
0F
0G
b00000 H
b00000 I
b00000 J
b00000000000000000000000000000000 K
b0000000000000000000000000 L
b00 M
1N
b0000000 O
b000 P
b000 Q
0R
b00000000000000000000000000000000 S
0T
b00 U
0V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
1Z
1[
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000100 _
b00000000000000000000000000000100 `
b00000000000000000000000000000000 a
b00000000000000000000000000100000 b
b00000000000000000000000000000101 c
